{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CAKXC,KAAMC,SAASC,cAAc,UAG3BC,EAAS,KA6Bb,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BT,EAASU,YAAW,WACdN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IArCPP,EAAKC,KAAKc,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBACJC,aAAad,GAEb,IAAgCe,EAAAH,EAAII,OAAOC,SAAnCC,EAAwBH,EAAxBZ,MAAOgB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEjBC,EAAYC,OAAOJ,EAAMK,OAC7B,GAAAL,EAAAK,MAAA,GACqBJ,EAAjBI,MAAW,GAAIH,EAAQG,MAAM,EAE/B,YADA7B,EAAA8B,OAAOC,QAAS,wCAGlB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOG,MAAOG,GAAK,EACtCzB,EAAcyB,EAAGL,GACdM,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBT,EAAA8B,OAAOK,QAAQ,wBAAyCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAE/D4B,OAAM,SAAAH,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBT,EAAA8B,OAAOQ,QAAQ,uBAAsCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAE/DkB,GAAaC,OAAOH,EAAKI,OAE3BX,EAAIqB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  // delay: document.querySelector('input[name=delay]'),\n  // step: document.querySelector('input[name=step]'),\n  // amount: document.querySelector('input[name=amount]'),\n  // btn: document.querySelector('button'),\n  form: document.querySelector('.form'),\n};\n\nlet timeId = null;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  clearTimeout(timeId);\n\n  const { delay, step, amount } = evt.target.elements;\n\n  let stepValue = Number(delay.value);\n  /*перевірка на нуль і менше*/\n  if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n    Notify.warning(`All values must be greater than zero`);\n    return;\n  }\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, stepValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise #${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise #${position} in ${delay}ms`);\n      });\n    stepValue += Number(step.value);\n  }\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    timeId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$timeId","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","clearTimeout","_elements","target","elements","delay1","step","amount","stepValue","Number","value","Notify","warning","i","then","param","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.d683f0fa.js.map"}